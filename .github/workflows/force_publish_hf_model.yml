name: Force publish model to Hugging Face

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish-model:
    runs-on: ubuntu-latest
    env:
      HUGGINGFACE_MODEL_ID: Saigouthamuppaluri/StartupEvaluator
      MODEL_ARTIFACT_NAME: startup_model.joblib
      HF_TOKEN: ${{ secrets.HF_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install scikit-learn pandas numpy joblib huggingface_hub

      - name: Build synthetic model bundle (guaranteed)
        run: |
          python - << 'PY'
          import os
          import numpy as np
          import pandas as pd
          from sklearn.model_selection import train_test_split
          from sklearn.preprocessing import StandardScaler
          from sklearn.pipeline import Pipeline
          from sklearn.linear_model import LogisticRegression
          import joblib

          n = 400
          rng = np.random.default_rng(42)
          X = pd.DataFrame({
            "age": rng.integers(1, 10, n),
            "arr": rng.uniform(5e5, 1.5e8, n),
            "burn": rng.uniform(2e5, 2.5e7, n),
            "cash": rng.uniform(5e5, 8e8, n),
            "ltv_cac_ratio": rng.uniform(0.5, 7.0, n),
            "investor_quality_score": rng.uniform(3.0, 9.8, n),
          })
          # simple non-linear heuristic for label
          y = ((X["arr"]/1e7) + (X["cash"]/(X["burn"]+1e-6)) + (X["ltv_cac_ratio"]/3.0) + ((X["investor_quality_score"]-5)/2.5) > 3.2).astype(int)

          Xtr, Xte, ytr, yte = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
          pipe = Pipeline([("scaler", StandardScaler()), ("model", LogisticRegression(max_iter=600))])
          pipe.fit(Xtr, ytr)

          os.makedirs("models", exist_ok=True)
          bundle = {
            "clf": pipe,
            "reg": None,
            "feature_list": list(X.columns),
            "categoricals": [],
            "meta": {"source": "synthetic", "auc": None}
          }
          joblib.dump(bundle, "models/startup_model.joblib")
          print("Wrote models/startup_model.joblib")
          PY
          ls -lh models/startup_model.joblib

      - name: Verify Hugging Face token and repo
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          python - << 'PY'
          import os
          from huggingface_hub import HfApi
          token = os.environ["HF_TOKEN"]
          api = HfApi()
          who = api.whoami(token=token)
          print("HF whoami:", who)
          PY

      - name: Publish to Hugging Face (create repo if needed)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HUGGINGFACE_MODEL_ID: ${{ env.HUGGINGFACE_MODEL_ID }}
          MODEL_ARTIFACT_NAME: ${{ env.MODEL_ARTIFACT_NAME }}
        run: |
          python - << 'PY'
          import os
          from huggingface_hub import create_repo, upload_file
          repo_id = os.environ["HUGGINGFACE_MODEL_ID"]
          token = os.environ["HF_TOKEN"]
          path = "models/startup_model.joblib"
          create_repo(repo_id=repo_id, token=token, repo_type="model", exist_ok=True, private=False)
          upload_file(
              path_or_fileobj=path,
              path_in_repo=os.environ.get("MODEL_ARTIFACT_NAME","startup_model.joblib"),
              repo_id=repo_id,
              repo_type="model",
              token=token
          )
          print("Uploaded to HF:", repo_id)
          PY
          echo "MODEL_ASSET_URL=https://huggingface.co/${HUGGINGFACE_MODEL_ID}/resolve/main/${MODEL_ARTIFACT_NAME}" >> $GITHUB_ENV

      - name: Upload artifact (backup)
        uses: actions/upload-artifact@v4
        with:
          name: startup_model_joblib
          path: models/startup_model.joblib
