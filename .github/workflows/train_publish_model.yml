name: Train and publish startup model (hardened)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1" # Mondays 03:00 UTC

permissions:
  contents: write

jobs:
  train-and-publish:
    runs-on: ubuntu-latest
    env:
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      HUGGINGFACE_MODEL_ID: Saigouthamuppaluri/StartupEvaluator
      MODEL_ARTIFACT_NAME: startup_model.joblib
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install kaggle joblib scikit-learn pandas huggingface_hub

      - name: Configure Kaggle
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${KAGGLE_USERNAME}\",\"key\":\"${KAGGLE_KEY}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          # sanity check
          kaggle datasets list -s startup-success -p 1 || true

      - name: Download dataset and show CSVs
        run: |
          mkdir -p /tmp/kaggle_in
          kaggle datasets download -d justinas/startup-success-prediction -p /tmp/kaggle_in --unzip
          echo "Available CSV files:"
          ls -lh /tmp/kaggle_in/*.csv || true

      - name: Train model from Kaggle dataset
        run: |
          python -m models.training.train_kaggle --dataset-ref justinas/startup-success-prediction --target-col status
          test -f models/startup_model.joblib
          ls -lh models/startup_model.joblib

      - name: Upload model as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: startup_model_joblib
          path: models/startup_model.joblib

      - name: Publish to Hugging Face (create repo if needed)
        id: hf_upload
        if: env.HF_TOKEN != ''
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HUGGINGFACE_MODEL_ID: ${{ env.HUGGINGFACE_MODEL_ID }}
          MODEL_ARTIFACT_NAME: ${{ env.MODEL_ARTIFACT_NAME }}
        run: |
          python - << 'PY'
          import os, sys
          from huggingface_hub import HfApi, create_repo, upload_file
          repo_id = os.environ["HUGGINGFACE_MODEL_ID"]
          token = os.environ["HF_TOKEN"]
          path = "models/startup_model.joblib"
          # ensure repo exists
          try:
            create_repo(repo_id=repo_id, token=token, repo_type="model", exist_ok=True, private=False)
          except Exception as e:
            print("Repo creation warning:", e, file=sys.stderr)
          # upload file
          upload_file(
              path_or_fileobj=path,
              path_in_repo=os.environ.get("MODEL_ARTIFACT_NAME","startup_model.joblib"),
              repo_id=repo_id,
              repo_type="model",
              token=token
          )
          print("Uploaded to HF:", repo_id)
          PY
          echo "MODEL_ASSET_URL=https://huggingface.co/${HUGGINGFACE_MODEL_ID}/resolve/main/${MODEL_ARTIFACT_NAME}" >> $GITHUB_ENV

      - name: Publish to GitHub Release (fallback or HF upload failed)
        if: env.HF_TOKEN == '' || failure() && steps.hf_upload.outcome == 'failure'
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: model-${{ github.run_id }}
          name: "Model artifact ${{ github.run_id }}"
          body: "Automated model artifact built from Kaggle."
          draft: false
          prerelease: false
          files: models/startup_model.joblib

      - name: Set MODEL_ASSET_URL repository variable (release fallback)
        if: env.HF_TOKEN == '' || (steps.hf_upload.outcome == 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "model-" + context.runId
            });
            const asset = release.assets.find(a => a.name === "startup_model.joblib");
            if (asset) {
              const url = asset.browser_download_url;
              await github.rest.actions.updateRepoVariable({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: "MODEL_ASSET_URL",
                value: url
              });
              core.info(`Set MODEL_ASSET_URL=${url}`);
            } else {
              core.warning("No asset found to set MODEL_ASSET_URL");
            }
